<?php

namespace app\modules\catalog\controllers;

use app\models\tool\parser\providers\SibagroTrade;
use yii\helpers\Json;
use yii\web\Controller;
use app\models\tool\parser\ParseProvider;
use app\modules\site\models\tools\Currency;
use app\modules\site\models\tools\PriceTool;
use app\modules\basket\models\entity\Basket;

class AjaxController extends Controller
{
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionCatalogFillFromVendor()
    {
        $data = \Yii::$app->request->post();

        $factory = new ParseProvider($data['link']);
        $factory->contract();

        return Json::encode($factory->getInfo());
    }

    public function actionGetMiniCartAmount()
    {
        return Json::encode([
            'text' => PriceTool::format(Basket::getInstance()->cash()) . Currency::getInstance()->show()
        ]);
    }

    public function actionGetMiniCartCount()
    {
        return Json::encode([
            'text' => \Yii::t('app', '{n, plural, =0{позиций} =1{позиций} one{# позиций} few{# позиций} many{# позиций} other{# позиции}}', ['n' => Basket::count()])
        ]);
    }

    public function actionExist()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $data = Json::decode(file_get_contents('php://input'));
        $code = $data['code'];
        $response = false;

        if ($data['vendorId'] == 4) {
            $opts = array(
                'http' => array(
                    'method' => "GET",
                    'header' => "Accept-language: en\r\n" .
                        "Cookie: beget=begetok\r\n"
                )
            );

            $context = stream_context_create($opts);
            $url = SibagroTrade::getProductDetailByCode($code);
            $file = file_get_contents($url, false, $context);

            $response = stristr($file, '<span class=sklad>В наличии</span>') !== false;
        }

        return Json::encode($response);
    }
}